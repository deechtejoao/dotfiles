#!/bin/bash

# Configuration
DOTFILES_DIR="$HOME/.dotfiles"
REPO_DIRS=("i3" "i3status-rust" "rofi" "nvim" "kitty")
CONFIG_BASE="$HOME/.config"
COMMIT_MSG="Auto commit: $(date '+%Y-%m-%d %H:%M:%S')"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to get program-specific commit message
get_program_message() {
    local program="$1"
    case "$program" in
        "i3")
            echo "i3: Updated window manager configuration"
            ;;
        "i3status-rust")
            echo "i3status-rust: Updated status bar configuration"
            ;;
        "rofi")
            echo "rofi: Updated application launcher configuration"
            ;;
        "nvim")
            echo "nvim: Updated neovim configuration"
            ;;
        "kitty")
          echo "kitty: Update kitty configuration"
          ;;
        *)
            echo "$program: Updated configuration"
            ;;
    esac
}

# Check if running inside a git repository
if [[ ! -d "$DOTFILES_DIR/.git" ]]; then
    print_error "Directory $DOTFILES_DIR is not a git repository"
    exit 1
fi

# Change to dotfiles directory
cd "$DOTFILES_DIR" || exit 1

# Track which directories changed
changed_dirs=()

# Check for changes in specified directories
for dir in "${REPO_DIRS[@]}"; do
    repo_path="$DOTFILES_DIR/$dir"
    config_path="$CONFIG_BASE/$dir"
    
    # Check if both directories exist
    if [[ -d "$config_path" && -d "$repo_path" ]]; then
        # Sync changes from config to repo if different
        if ! diff -r "$repo_path" "$config_path" >/dev/null 2>&1; then
            print_status "Syncing changes from $config_path to $repo_path"
            rsync -a --delete "$config_path/" "$repo_path/"
            git add "$dir"
            changed_dirs+=("$dir")
        fi
    elif [[ -d "$config_path" && ! -d "$repo_path" ]]; then
        # Config exists but not in repo - copy it over
        print_status "Copying $config_path to $repo_path"
        cp -r "$config_path" "$repo_path"
        git add "$dir"
        changed_dirs+=("$dir")
    elif [[ -d "$repo_path" ]]; then
        # Only repo exists - check for changes in the repo itself
        if [[ -n $(git status "$dir" --porcelain) ]]; then
            print_status "Changes detected in $dir"
            changed_dirs+=("$dir")
        fi
    fi
done

# Commit and push if changes were found
if [[ ${#changed_dirs[@]} -gt 0 ]]; then
    # Build commit message based on changed directories
    if [[ ${#changed_dirs[@]} -eq 1 ]]; then
        COMMIT_MSG=$(get_program_message "${changed_dirs[0]}")
    else
        COMMIT_MSG="Update configurations: "
        for i in "${!changed_dirs[@]}"; do
            COMMIT_MSG+="${changed_dirs[$i]}"
            if [[ $i -lt $((${#changed_dirs[@]} - 1)) ]]; then
                COMMIT_MSG+=", "
            fi
        done
    fi
    
    print_status "Committing changes: $COMMIT_MSG"
    if git commit -m "$COMMIT_MSG"; then
        print_status "Changes committed successfully"
        
        # Push changes 
        print_status "Pushing changes..."
        if git push; then
            print_status "Changes pushed successfully"
        else
            print_error "Failed to push changes"
            exit 1
        fi
    else
        print_error "Failed to commit changes"
        exit 1
    fi
else
    print_status "No changes to commit"
fi
